name: Admin Dashboard CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['admin-dashboard/**']
  pull_request:
    branches: [main, develop]
    paths: ['admin-dashboard/**']

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: funlynk/admin-dashboard

jobs:
  test:
    name: Test Admin Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: admin-dashboard/package-lock.json

      - name: Install dependencies
        working-directory: ./admin-dashboard
        run: npm ci

      - name: Run linting
        working-directory: ./admin-dashboard
        run: npm run lint

      - name: Run type checking
        working-directory: ./admin-dashboard
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./admin-dashboard
        run: npm run test -- --coverage --watchAll=false

      - name: Run accessibility tests
        working-directory: ./admin-dashboard
        run: npm run test:a11y

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./admin-dashboard/coverage/lcov.info
          flags: admin-dashboard

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=admin-dashboard/package.json

      - name: Run npm audit
        working-directory: ./admin-dashboard
        run: npm audit --audit-level=high

  build:
    name: Build Admin Dashboard
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: admin-dashboard/package-lock.json

      - name: Install dependencies
        working-directory: ./admin-dashboard
        run: npm ci

      - name: Build application
        working-directory: ./admin-dashboard
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_URL || secrets.STAGING_API_URL }}
          REACT_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: admin-dashboard-build
          path: admin-dashboard/build/

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: admin-dashboard-build
          path: admin-dashboard/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./admin-dashboard
          file: ./admin-dashboard/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to EKS staging
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name funlynk-staging
          
          # Update deployment image
          kubectl set image deployment/admin-dashboard admin-dashboard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} -n funlynk
          
          # Wait for rollout
          kubectl rollout status deployment/admin-dashboard -n funlynk --timeout=300s

      - name: Run staging tests
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_ADMIN_URL }}/health || exit 1

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Admin Dashboard staging deployment ${{ job.status }}! ðŸŽ¨"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to EKS production
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name funlynk-production
          
          # Update deployment image
          kubectl set image deployment/admin-dashboard admin-dashboard=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} -n funlynk
          
          # Wait for rollout
          kubectl rollout status deployment/admin-dashboard -n funlynk --timeout=600s

      - name: Run production tests
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_ADMIN_URL }}/health || exit 1

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Admin Dashboard production deployment ${{ job.status }}! ðŸŽ¨\nVersion: ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
