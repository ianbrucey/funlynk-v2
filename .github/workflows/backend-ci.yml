name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['backend/**']
  pull_request:
    branches: [main, develop]
    paths: ['backend/**']

env:
  PHP_VERSION: '8.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: funlynk/backend

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: funlynk_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('backend/composer.lock') }}

      - name: Install Composer dependencies
        working-directory: ./backend
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy environment file
        working-directory: ./backend
        run: cp .env.example .env

      - name: Generate application key
        working-directory: ./backend
        run: php artisan key:generate

      - name: Configure database
        working-directory: ./backend
        run: |
          php artisan config:cache
          php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: funlynk_test
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run PHP CS Fixer
        working-directory: ./backend
        run: vendor/bin/pint --test

      - name: Run Larastan
        working-directory: ./backend
        run: vendor/bin/phpstan analyse

      - name: Run PHPUnit tests
        working-directory: ./backend
        run: vendor/bin/phpunit --coverage-xml=coverage/coverage-xml --log-junit=coverage/junit.xml
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: funlynk_test
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/coverage-xml
          flags: backend
          name: backend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install Composer dependencies
        working-directory: ./backend
        run: composer install --no-dev --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Run security checker
        working-directory: ./backend
        run: composer audit

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to EKS staging
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name funlynk-staging

          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/staging/

          # Update deployment image
          kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} -n funlynk

          # Wait for rollout
          kubectl rollout status deployment/backend -n funlynk --timeout=300s
        env:
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Run basic health checks
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
          curl -f ${{ secrets.STAGING_API_URL }}/api/status || exit 1
        continue-on-error: false

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Backend staging deployment ${{ job.status }}! ðŸš€"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to EKS production
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name funlynk-production

          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/production/

          # Update deployment image
          kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} -n funlynk

          # Wait for rollout
          kubectl rollout status deployment/backend -n funlynk --timeout=600s
        env:
          PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Run production smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run comprehensive health checks
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/api/status || exit 1

          # Test critical endpoints
          curl -f ${{ secrets.PRODUCTION_API_URL }}/api/auth/check || exit 1
        continue-on-error: false

      - name: Create deployment record
        run: |
          # Record deployment in monitoring system
          curl -X POST ${{ secrets.MONITORING_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "service": "backend",
                "version": "${{ github.sha }}",
                "environment": "production",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "status": "success"
              }
            }'
        continue-on-error: true

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Backend production deployment ${{ job.status }}! ðŸš€\nVersion: ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
