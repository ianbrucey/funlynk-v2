name: Mobile App CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['mobile/**']
  pull_request:
    branches: [main, develop]
    paths: ['mobile/**']

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Test Mobile App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Run linting
        working-directory: ./mobile
        run: npm run lint

      - name: Run type checking
        working-directory: ./mobile
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./mobile
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=mobile/package.json

      - name: Run npm audit
        working-directory: ./mobile
        run: npm audit --audit-level=high

  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        working-directory: ./mobile/android
        run: chmod +x ./gradlew

      - name: Build Android APK
        working-directory: ./mobile
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk-${{ github.ref_name }}
          path: mobile/android/app/build/outputs/apk/release/

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: mobile/ios

      - name: Install CocoaPods
        working-directory: ./mobile/ios
        run: pod install

      - name: Build iOS app
        working-directory: ./mobile
        run: |
          npx react-native build-ios --mode=Release

      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build-${{ github.ref_name }}
          path: mobile/ios/build/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-android]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk-${{ github.ref_name }}
          path: ./mobile/android/app/build/outputs/apk/release/

      - name: Run Detox E2E tests
        working-directory: ./mobile
        run: |
          # Start Metro bundler in background
          npx react-native start &
          
          # Wait for Metro to start
          sleep 30
          
          # Run E2E tests
          npx detox test --configuration android.emu.release
        env:
          DETOX_CONFIGURATION: android.emu.release

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk-${{ github.ref_name }}
          path: ./android-build/

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: ./android-build/app-release.apk
          releaseNotes: "Staging build from commit ${{ github.sha }}"

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Mobile app staging deployment ${{ job.status }}! ðŸ“±"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk-${{ github.ref_name }}
          path: ./android-build/

      - name: Deploy to Google Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.funlynk.app
          releaseFiles: ./android-build/app-release.apk
          track: production
          status: completed

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Mobile app production deployment ${{ job.status }}! ðŸ“±\nVersion: ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
